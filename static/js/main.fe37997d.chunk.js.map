{"version":3,"sources":["helpers/helpers.js","redux/constants.js","redux/actions.js","components/Employees/EmployeeItem.js","components/Employees/AllEmployees.js","components/BirthdaysSide/BdayMonth.js","components/BirthdaysSide/BirthdaysList.js","App.js","reportWebVitals.js","redux/reducers.js","store.js","index.js"],"names":["alphabet","toUpperCase","split","months","sortArr","arr","name","sort","a","b","ALL_EMPLOYEES_REQUEST","ALL_EMPLOYEES_SUCCESS","ALL_EMPLOYEES_FAIL","SET_EMPLOYEE","setEmployee","employee","dispatch","birthdaysEmployees","localStorage","getItem","birthdaysEmployeesParsed","JSON","parse","updatedEmployee","bdayEmployeesUpdated","isActive","filter","emp","id","setItem","stringify","type","payload","EmployeeItem","useDispatch","className","style","color","lastName","firstName","checked","onChange","AllEmployees","useEffect","axios","get","data","activeEmployeesUnparsed","activeEmployees","updatedEmployees","map","find","console","log","useSelector","state","getEmployees","allEmployees","loading","error","sortEmployees","employeesList","char","alphabetEmployees","alphabetElement","length","BdayMonth","birthdaysEmployeesList","bday","index","employees","month","moment","dob","format","BirthdaysList","selectedEmployees","i","birthdaysSortedEmployees","curMonth","Date","getMonth","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initState","reducer","combineReducers","action","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe37997d.chunk.js","sourcesContent":["export const alphabet = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split(\"\");\r\n\r\nexport const months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nexport const sortArr = (arr, name) => {\r\n  const result = arr?.sort((a, b) => {\r\n    return a[name] === b[name] ? 0 : a[name] < b[name] ? -1 : 1;\r\n  });\r\n  return result;\r\n};\r\n","export const ALL_EMPLOYEES_REQUEST = \"ALL_EMPLOYYES_REQUEST\";\r\nexport const ALL_EMPLOYEES_SUCCESS = \"ALL_EMPLOYEES_SUCCESS\";\r\nexport const ALL_EMPLOYEES_FAIL = \"ALL_EMPLOYYES_FAIL\";\r\n\r\nexport const SET_EMPLOYEE = \"SET_EMPLOYEE\";\r\n","import axios from \"axios\";\r\nimport {\r\n  ALL_EMPLOYEES_FAIL,\r\n  ALL_EMPLOYEES_REQUEST,\r\n  ALL_EMPLOYEES_SUCCESS,\r\n  SET_EMPLOYEE,\r\n} from \"./constants\";\r\n\r\nexport const getAllEmployees = () => async (dispatch) => {\r\n  dispatch({ type: ALL_EMPLOYEES_REQUEST });\r\n  try {\r\n    const { data } = await axios.get(\r\n      \"https://yalantis-react-school-api.yalantis.com/api/task0/users\"\r\n    );\r\n\r\n    const activeEmployeesUnparsed =\r\n      localStorage.getItem(\"bdayEmployees\") || \"[]\";\r\n    const activeEmployees = JSON.parse(activeEmployeesUnparsed);\r\n\r\n    const updatedEmployees = data.map((emp) => {\r\n      const activeEmp = activeEmployees.find(({ id }) => id === emp.id);\r\n      if (activeEmp) {\r\n        return { ...emp, isActive: true };\r\n      }\r\n      return { ...emp, isActive: false };\r\n    });\r\n\r\n    dispatch({ type: ALL_EMPLOYEES_SUCCESS, payload: updatedEmployees });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({ type: ALL_EMPLOYEES_FAIL, payload: error });\r\n  }\r\n};\r\n\r\nexport const setEmployee = (employee) => (dispatch) => {\r\n  const birthdaysEmployees = localStorage.getItem(\"bdayEmployees\") || \"[]\";\r\n\r\n  const birthdaysEmployeesParsed = JSON.parse(birthdaysEmployees);\r\n\r\n  const updatedEmployee = { ...employee };\r\n  const bdayEmployeesUpdated = employee.isActive\r\n    ? [...birthdaysEmployeesParsed, updatedEmployee]\r\n    : birthdaysEmployeesParsed.filter((emp) => emp.id !== updatedEmployee.id);\r\n\r\n  localStorage.setItem(\"bdayEmployees\", JSON.stringify(bdayEmployeesUpdated));\r\n\r\n  dispatch({ type: SET_EMPLOYEE, payload: updatedEmployee });\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setEmployee } from \"../../redux/actions\";\r\n\r\nconst EmployeeItem = ({ employee }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"employee__single item\">\r\n      <span\r\n        style={{\r\n          color: employee.isActive && \"red\",\r\n        }}>{`${employee.lastName} ${employee.firstName}`}</span>\r\n\r\n      <form>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            checked={!employee.isActive}\r\n            onChange={() => {\r\n              dispatch(setEmployee({ ...employee, isActive: false }));\r\n            }}\r\n          />{\" \"}\r\n          Not active\r\n        </label>\r\n\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            checked={employee.isActive}\r\n            onChange={() => {\r\n              dispatch(setEmployee({ ...employee, isActive: true }));\r\n            }}\r\n          />{\" \"}\r\n          Active\r\n        </label>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmployeeItem;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { alphabet, sortArr } from \"../../helpers/helpers\";\r\nimport { getAllEmployees } from \"../../redux/actions\";\r\nimport EmployeeItem from \"./EmployeeItem\";\r\n\r\nconst AllEmployees = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllEmployees());\r\n  }, [dispatch]);\r\n\r\n  const { allEmployees, loading, error } = useSelector(\r\n    (state) => state.getEmployees\r\n  );\r\n\r\n  const sortEmployees = sortArr(allEmployees, \"lastName\");\r\n\r\n  const employeesList =\r\n    !loading &&\r\n    alphabet.map((char) => {\r\n      const alphabetEmployees = sortEmployees?.filter(\r\n        (employee) => employee.lastName[0] === char\r\n      );\r\n\r\n      const alphabetElement = alphabetEmployees?.map((employee) => (\r\n        <EmployeeItem key={employee.id} employee={employee} />\r\n      ));\r\n\r\n      return (\r\n        <div className=\"employees__item\" key={char}>\r\n          <h3 className=\"employees-alphabet\">{char}</h3>\r\n          {alphabetElement?.length ? alphabetElement : \"----\"}\r\n        </div>\r\n      );\r\n    });\r\n\r\n  console.log(allEmployees);\r\n\r\n  return (\r\n    <div className=\"container__employees\">\r\n      {error ? (\r\n        <p>Oops, something went wrong on server side..</p>\r\n      ) : !loading ? (\r\n        <>\r\n          <h2>Employesses</h2>\r\n          <div className=\"employees__list\">{employeesList}</div>\r\n        </>\r\n      ) : (\r\n        <p>Loading...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AllEmployees;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst BdayMonth = ({ birthdaysEmployeesList }) => {\r\n  return (\r\n    <div>\r\n      {birthdaysEmployeesList.map((bday, index) => {\r\n        if (bday.employees?.length > 0) {\r\n          return (\r\n            <div key={index}>\r\n              <div>\r\n                <div>{bday?.month}</div>\r\n                <div>\r\n                  {bday?.employees.map((emp) => {\r\n                    return (\r\n                      <div key={emp.id}>\r\n                        <ul>\r\n                          <li>\r\n                            <span>{emp.lastName + \" \" + emp.firstName} - </span>\r\n                            <span>\r\n                              {`${moment(emp.dob).format(\"DD\")}\r\n                                  \r\n                                  ${moment(emp.dob).format(\"MMMM\")}, ${moment(\r\n                                emp.dob\r\n                              ).format(\"YYYY\")} year`}\r\n                            </span>\r\n                          </li>\r\n                        </ul>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BdayMonth;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { sortArr, months } from \"../../helpers/helpers\";\r\nimport moment from \"moment\";\r\nimport BdayMonth from \"./BdayMonth\";\r\n\r\nconst BirthdaysList = () => {\r\n  const { allEmployees } = useSelector((state) => state.getEmployees);\r\n\r\n  const selectedEmployees = allEmployees?.filter((i) => i.isActive);\r\n  if (selectedEmployees.length === 0) {\r\n    return <p>Employees List is empty</p>;\r\n  } else {\r\n    const birthdaysSortedEmployees = sortArr(selectedEmployees, \"lastName\");\r\n    const curMonth = new Date().getMonth();\r\n\r\n    const updatedMonths = [\r\n      ...months.slice(curMonth),\r\n      ...months.slice(0, curMonth),\r\n    ];\r\n\r\n    const birthdaysEmployeesList = updatedMonths.map((month) => {\r\n      return {\r\n        month,\r\n        employees: birthdaysSortedEmployees?.filter((employee) => {\r\n          return moment(employee.dob).format(\"MMMM\") === month;\r\n        }),\r\n      };\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <BdayMonth birthdaysEmployeesList={birthdaysEmployeesList} />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default BirthdaysList;\r\n","import \"./App.css\";\nimport AllEmployees from \"./components/Employees/AllEmployees\";\nimport BirthdaysList from \"./components/BirthdaysSide/BirthdaysList\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <AllEmployees />\n      <div>\n        <h2>Employees birthday</h2>\n        <BirthdaysList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  ALL_EMPLOYEES_FAIL,\r\n  ALL_EMPLOYEES_REQUEST,\r\n  ALL_EMPLOYEES_SUCCESS,\r\n  SET_EMPLOYEE,\r\n} from \"./constants\";\r\n\r\nconst initState = {\r\n  allEmployees: [],\r\n  loading: true,\r\n  error: null,\r\n};\r\n\r\nexport const employeesReducer = (state = initState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case ALL_EMPLOYEES_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case ALL_EMPLOYEES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        allEmployees: payload,\r\n      };\r\n    case ALL_EMPLOYEES_FAIL:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: payload,\r\n      };\r\n    case SET_EMPLOYEE:\r\n      const updatedEmployee = payload;\r\n      const employees = state.allEmployees;\r\n      const updatedEmployees = employees.map(emp => {\r\n        if (emp.id !== updatedEmployee.id) {\r\n          return emp;\r\n        }\r\n        return updatedEmployee;\r\n      });\r\n\r\n      return {\r\n        allEmployees: updatedEmployees,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\r\nimport { employeesReducer } from \"./redux/reducers\";\r\n\r\nconst reducer = combineReducers({\r\n  getEmployees: employeesReducer,\r\n});\r\n\r\nconst middleware = [thunk];\r\n\r\n\r\nconst store = createStore(\r\n  reducer,\r\n\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n\r\n//export default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}